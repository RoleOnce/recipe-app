import { RecipeInterface } from '../../interfaces/RecipeInterface';




const [searchResults, setSearchResults] = useState([]);
  const [searchResults, setSearchResults] = useState([]);
  const [searchQuery, setSearchQuery] = useState('');




const handleSearch = async (recipeId: string) => {
    try {
      const response = await axios.get(`${URL}/recipes/${recipeId}`);
      setSearchResults(response.data);
    } catch (error) {
      console.error("Error searching for recipes:", error);
    }
  };





  const handleChange = (event: any) => {
    const filteredValue = event.target.value.replace(/[^a-zA-Z\s]/g, "");
    setRecipeName(
      filteredValue.charAt(0).toUpperCase() +
        filteredValue.slice(1).toLowerCase()
    );
    handleSearch(filteredValue); // Skicka sökfrågan när titeln ändras
  };



 // const handleChange = async (input: React.ChangeEvent<HTMLInputElement>) => {
  //   const { value } = input.target;
  //   setRecipeId(value);
  //   const recipe = await getRecipeById(value);
  //   if (recipe) {
  //     setRecipeName(recipe.title);
  //     setRecipeDescription(recipe.description);
  //     setRecipeRating(recipe.ratings);
  //     setRecipeImageUrl(recipe.imageUrl);
  //     setRecipeTimeInMin(recipe.timeInMins);
  //     setRecipeCategory(recipe.categories);
  //     setRecipeInstructions(recipe.instructions);
  //     // Här kan du lägga till logik för att hantera ingredienser om det behövs
  //   }
  // };

  // const handleSearch = async () => {
  //   try {
  //     const response = await axios.get(`${URL}/recipes/${searchQuery}`);
  //     setSearchResults(response.data);
  //   } catch (error) {
  //     console.error('Error searching for recipes:', error);
  //   }
  // };



<input
        type="text"
        value={searchQuery}
        onChange={(e) => setSearchQuery(e.target.value)}
        placeholder="Sök recept..."
      />
      <button onClick={handleSearch}>Sök</button>
      <ul>
        {searchResults.map((recipe: RecipeInterface) => (
          <li key={recipe._id}>{recipe.title}</li>
        ))}
      </ul>
  





        <div>
          <label className="update-label">
            Titttel:
            <input
              type="search"
              name="titttle"
              value={recipeName}
              onChange={handleChange}
            />
            <button>Search</button>
          </label>
          <div>
            <h2>Sökresultat:</h2>
            <ul>
              {searchResults.map((recipe: RecipeInterface) => (
                <li key={recipe._id}>{recipe.title}</li>
              ))}
            </ul>
          </div>
        </div>